/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/dzou-hpe/kubesecops/pkg/apis/zap/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ZapLister helps list Zaps.
// All objects returned here must be treated as read-only.
type ZapLister interface {
	// List lists all Zaps in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Zap, err error)
	// Zaps returns an object that can list and get Zaps.
	Zaps(namespace string) ZapNamespaceLister
	ZapListerExpansion
}

// zapLister implements the ZapLister interface.
type zapLister struct {
	indexer cache.Indexer
}

// NewZapLister returns a new ZapLister.
func NewZapLister(indexer cache.Indexer) ZapLister {
	return &zapLister{indexer: indexer}
}

// List lists all Zaps in the indexer.
func (s *zapLister) List(selector labels.Selector) (ret []*v1alpha1.Zap, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Zap))
	})
	return ret, err
}

// Zaps returns an object that can list and get Zaps.
func (s *zapLister) Zaps(namespace string) ZapNamespaceLister {
	return zapNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ZapNamespaceLister helps list and get Zaps.
// All objects returned here must be treated as read-only.
type ZapNamespaceLister interface {
	// List lists all Zaps in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Zap, err error)
	// Get retrieves the Zap from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Zap, error)
	ZapNamespaceListerExpansion
}

// zapNamespaceLister implements the ZapNamespaceLister
// interface.
type zapNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Zaps in the indexer for a given namespace.
func (s zapNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Zap, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Zap))
	})
	return ret, err
}

// Get retrieves the Zap from the indexer for a given namespace and name.
func (s zapNamespaceLister) Get(name string) (*v1alpha1.Zap, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("zap"), name)
	}
	return obj.(*v1alpha1.Zap), nil
}
